#include <type_traits>
#include <limits>
#include <iosfwd>
#include <iterator>

template<typename _UIntTp>
  class bit_reference;

template<typename _UIntTp>
  class bit_pointer;

// Binary digits structure definition
template<typename _Tp>
  struct binary_digits
  : std::enable_if<std::is_integral<_Tp>::value
		&& std::is_unsigned<_Tp>::value,
	std::integral_constant<std::size_t, std::numeric_limits<_Tp>::digits>
  >::type
  { };

template<typename _Tp>
  constexpr std::size_t
  binary_digits_v = binary_digits<_Tp>::value;

// Bit value class definition
class bit_value
{
public:
  // Types
  using size_type = std::size_t;

  // Lifecycle
  bit_value() noexcept = default;

  template<typename _Tp>
    constexpr bit_value(bit_reference<_Tp> __val) noexcept;

  template<typename _UIntTp>
    explicit constexpr bit_value(_UIntTp __val) noexcept;

  template<typename _UIntTp>
    constexpr bit_value(_UIntTp __val, size_type __pos);

  // Assignment
  template<typename _Tp>
    bit_value& operator=(bit_reference<_Tp> __val) noexcept;

  template<typename _UIntTp>
    bit_value& assign(_UIntTp __val) noexcept;

  template<typename _UIntTp>
    bit_value& assign(_UIntTp __val, size_type __pos);

  // Bitwise assignment
  bit_value& operator&=(bit_value __other) noexcept;

  bit_value& operator|=(bit_value __other) noexcept;

  bit_value& operator^=(bit_value __other) noexcept;

  // Conversion
  explicit constexpr operator bool() const noexcept;

  // Swap members
  void swap(bit_value& __other);

  template<typename _Tp>
    void swap(bit_reference<_Tp> __other);

  // Bit manipulation
  void set(bool b) noexcept;

  void set() noexcept;

  void reset() noexcept;

  void flip() noexcept;
};

// Bitwise operators
constexpr bit_value operator&(bit_value __lhs, bit_value __rhs) noexcept;
constexpr bit_value operator|(bit_value __lhs, bit_value __rhs) noexcept;
constexpr bit_value operator^(bit_value __lhs, bit_value __rhs) noexcept;

// Comparison operators
constexpr bool operator==(bit_value __lhs, bit_value __rhs) noexcept;
constexpr bool operator!=(bit_value __lhs, bit_value __rhs) noexcept;
constexpr bool operator<(bit_value __lhs, bit_value __rhs) noexcept;
constexpr bool operator<=(bit_value __lhs, bit_value __rhs) noexcept;
constexpr bool operator>(bit_value __lhs, bit_value __rhs) noexcept;
constexpr bool operator>=(bit_value __lhs, bit_value __rhs) noexcept;

// Stream functions
template<typename CharT, typename Traits>
  std::basic_istream<CharT, Traits>&
  operator>>(std::basic_istream<CharT, Traits>& __is, bit_value& __x);

template<typename CharT, typename Traits>
  std::basic_ostream<CharT, Traits>&
  operator<<(std::basic_ostream<CharT, Traits>& __os, bit_value __x);

// Constants
static constexpr bit_value zero_bit(0U);
static constexpr bit_value one_bit(1U);



// Bit reference class definition
template<typename _UIntTp>
  class bit_reference
  {
  public:
    // Types
    using underlying_type = _UIntTp;
    using size_type = std::size_t;

    // Lifecycle
    template<typename _Tp>
      constexpr bit_reference(const bit_reference<_Tp>& __other) noexcept;

    explicit constexpr bit_reference(underlying_type& __ref) noexcept;

    constexpr bit_reference(underlying_type& __ref, size_type __pos);

    // Assignment
    bit_reference& operator=(const bit_reference& __other) noexcept;

    template<typename _Tp>
      bit_reference& operator=(const bit_reference<_Tp>& __other) noexcept;

    bit_reference& operator=(bit_value __val) noexcept;

    bit_reference& assign(underlying_type __val) noexcept;

    bit_reference& assign(underlying_type __val, size_type __pos);

    // Bitwise assignment
    bit_reference& operator&=(bit_value __other) noexcept;

    bit_reference& operator|=(bit_value __other) noexcept;

    bit_reference& operator^=(bit_value __other) noexcept;

    // Conversion
    explicit constexpr operator bool() const noexcept;

    // Access
    constexpr bit_pointer<_UIntTp> operator&() const noexcept;

    // Swap members
    template<typename _Tp>
      void swap(bit_reference<_Tp> __other);

    void swap(bit_value& __other);

    // Bit manipulation
    void set(bool b) noexcept;

    void set() noexcept;

    void reset() noexcept;

    void flip() noexcept;

    // Underlying details
    constexpr underlying_type* address() const noexcept;
    constexpr size_type position() const noexcept;
    constexpr underlying_type mask() const noexcept;
  };

// Swap
template<typename _Tp, typename _Up>
  void swap(bit_reference<_Tp> __lhs, bit_reference<_Up> __rhs) noexcept;

template<typename _Tp>
  void swap(bit_reference<_Tp> __lhs, bit_value& __rhs) noexcept;

template<typename _Up>
  void swap(bit_value& __lhs, bit_reference<_Up> __rhs) noexcept;

// Stream functions
template<typename CharT, typename Traits, typename _Tp>
  std::basic_istream<CharT, Traits>& operator>>(
  std::basic_istream<CharT, Traits>& __is, bit_reference<_Tp>& __x);

template<typename CharT, typename Traits, typename _Tp>
  std::basic_ostream<CharT, Traits>& operator<<(
    std::basic_ostream<CharT, Traits>& __os, bit_reference<_Tp> __x);


// Bit pointer class definition
template<typename _UIntTp>
  class bit_pointer
  {
  public:

    // Types
    using underlying_type = _UIntTp;
    using size_type = std::size_t;
    using difference_type = std::ptrdiff_t;

    // Lifecycle
    bit_pointer() noexcept = default;

    template<typename _Tp>
      constexpr bit_pointer(const bit_pointer<_Tp>& __other) noexcept;

    constexpr bit_pointer(std::nullptr_t) noexcept;

    explicit constexpr bit_pointer(underlying_type* ptr) noexcept;

    constexpr bit_pointer(underlying_type* ptr, size_type __pos);

    // Assignment
    bit_pointer& operator=(std::nullptr_t) noexcept;

    bit_pointer& operator=(const bit_pointer& __other) noexcept;

    template<typename _Tp>
      bit_pointer& operator=(const bit_pointer<_Tp>& __other) noexcept;

    // Conversion
    explicit constexpr operator bool() const noexcept;

    // Access
    constexpr bit_reference<_UIntTp> operator*() const noexcept;

    constexpr bit_reference<_UIntTp>* operator->() const noexcept;

    constexpr bit_reference<_UIntTp> operator[](difference_type n) const;

    // Increment and decrement operators
    bit_pointer& operator++();
    bit_pointer& operator--();
    bit_pointer operator++(int);
    bit_pointer operator--(int);
    constexpr bit_pointer operator+(difference_type n) const;
    constexpr bit_pointer operator-(difference_type n) const;
    bit_pointer& operator+=(difference_type n);
    bit_pointer& operator-=(difference_type n);
  };

// Non-member arithmetic operators
template<typename _Tp>
  constexpr bit_pointer<_Tp>
  operator+(typename bit_pointer<_Tp>::difference_type n, bit_pointer<_Tp> __x);

template<typename _Tp, typename _Up>
  constexpr typename std::common_type<
			typename bit_pointer<_Tp>::difference_type,
			typename bit_pointer<_Up>::difference_type>::type
  operator-(bit_pointer<_Tp> __lhs, bit_pointer<_Up> __rhs);

// Comparison operators
template<typename _Tp, typename _Up>
  constexpr bool
  operator==(bit_pointer<_Tp> __lhs, bit_pointer<_Up> __rhs) noexcept;

template<typename _Tp, typename _Up>
  constexpr bool
  operator!=(bit_pointer<_Tp> __lhs, bit_pointer<_Up> __rhs) noexcept;

template<typename _Tp, typename _Up>
  constexpr bool
  operator<(bit_pointer<_Tp> __lhs, bit_pointer<_Up> __rhs) noexcept;

template<typename _Tp, typename _Up>
  constexpr bool
  operator<=(bit_pointer<_Tp> __lhs, bit_pointer<_Up> __rhs) noexcept;

template<typename _Tp, typename _Up>
  constexpr bool
  operator>(bit_pointer<_Tp> __lhs, bit_pointer<_Up> __rhs) noexcept;

template<typename _Tp, typename _Up>
  constexpr bool
  operator>=(bit_pointer<_Tp> __lhs, bit_pointer<_Up> __rhs) noexcept;


// Bit iterator class definition
template<typename Iterator>
class bit_iterator
{
public:

  // Types
  using iterator_type = Iterator;
  using underlying_type = typename _cv_iterator_traits<Iterator>::value_type;
  using iterator_category = typename std::iterator_traits<Iterator>::iterator_category;
  using value_type = bit_value;
  using difference_type = std::ptrdiff_t;
  using pointer = bit_pointer<underlying_type>;
  using reference = bit_reference<underlying_type>;
  using size_type = std::size_t;

  // Lifecycle
  constexpr bit_iterator();

  template<typename _Tp>
    constexpr bit_iterator(const bit_iterator<_Tp>& __other);

  explicit constexpr bit_iterator(iterator_type i);

  constexpr bit_iterator(iterator_type i, size_type __pos);

  // Assignment
  template<typename _Tp>
    bit_iterator& operator=(const bit_iterator<_Tp>& __other);

  // Access
  constexpr reference operator*() const noexcept;

  constexpr pointer operator->() const noexcept;

  constexpr reference operator[](difference_type n) const;

  // Increment and decrement operators
  bit_iterator& operator++();

  bit_iterator& operator--();

  bit_iterator operator++(int);

  bit_iterator operator--(int);

  constexpr bit_iterator operator+(difference_type n) const;

  constexpr bit_iterator operator-(difference_type n) const;

  bit_iterator& operator+=(difference_type n);

  bit_iterator& operator-=(difference_type n);

  // Underlying details
  constexpr iterator_type base() const;

  constexpr size_type position() const noexcept;

  constexpr underlying_type mask() const noexcept;
};

// Non-member arithmetic operators
template<typename _Tp>
  constexpr bit_iterator<_Tp>
  operator+(typename bit_iterator<_Tp>::difference_type n,
	    const bit_iterator<_Tp>& i);

template<typename _Tp, typename _Up>
  constexpr typename std::common_type<
			typename bit_iterator<_Tp>::difference_type,
			typename bit_iterator<_Up>::difference_type>::type
  operator-(const bit_iterator<_Tp>& __lhs, const bit_iterator<_Up>& __rhs);

// Comparison operators
template<typename _Tp, typename _Up>
  constexpr bool
  operator==(const bit_iterator<_Tp>& __lhs, const bit_iterator<_Up>& __rhs);

template<typename _Tp, typename _Up>
  constexpr bool
  operator!=(const bit_iterator<_Tp>& __lhs, const bit_iterator<_Up>& __rhs);

template<typename _Tp, typename _Up>
  constexpr bool
  operator<(const bit_iterator<_Tp>& __lhs, const bit_iterator<_Up>& __rhs);

template<typename _Tp, typename _Up>
  constexpr bool
  operator<=(const bit_iterator<_Tp>& __lhs, const bit_iterator<_Up>& __rhs);

template<typename _Tp, typename _Up>
  constexpr bool
  operator>(const bit_iterator<_Tp>& __lhs, const bit_iterator<_Up>& __rhs);

template<typename _Tp, typename _Up>
  constexpr bool
  operator>=(const bit_iterator<_Tp>& __lhs, const bit_iterator<_Up>& __rhs);

